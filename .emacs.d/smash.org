
#+STARTIP: overview

Smashing config

* Interface tweaks
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message t)
     (menu-bar-mode -1)
     (tool-bar-mode -1)
     (scroll-bar-mode -1)
     (fset 'yes-or-no-p 'y-or-n-p)
     (global-set-key (kbd "<f5>") 'revert-buffer)
     (setq split-width-threshold 1)
     (global-hl-line-mode t)
  #+END_SRC
* Undo tree
  #+BEGIN_SRC emacs-lisp
    (use-package undo-tree
      :ensure t
      :init
      (global-undo-tree-mode))
  #+END_SRC
* Projectile
  #+begin_src emacs-lisp
    (use-package projectile
      :ensure t
      :config
      (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)
      (projectile-mode +1))
  #+end_src
* Dashboard
  #+begin_src emacs-lisp
    (use-package dashboard
      :ensure t
      :init
      (progn
	(setq dashboard-items '((recents . 5)
				(projects . 5))))
      (setq dashboard-set-file-icons t)
      (setq dashboard-set-heading-icons t)
      (setq dashboard-startup-banner "/usr/share/icons/hicolor/128x128/apps/emacs.png")
      :config
      (dashboard-setup-startup-hook)
      (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))))
  #+end_src
* Try
  #+BEGIN_SRC emacs-lisp
    (use-package try
      :ensure t)
  #+END_SRC
* Which
  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :ensure t
      :config
      (which-key-mode))
  #+END_SRC
* Ace window
  #+BEGIN_SRC emacs-lisp
    (use-package ace-window
      :ensure t
      :init
      (progn
	(global-set-key [remap other-window] 'ace-window))
      (custom-set-faces
       '(aw-leading-char-face
	 ((t (:inherit ace-jump-face-foreground :height 3.0))))))
   #+END_SRC
* Org mode
** Org bullets
  #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  #+END_SRC
** Org reveal
   #+BEGIN_SRC emacs-lisp
     (use-package ox-reveal
       :ensure ox-reveal)

     (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
     (setq org-reveal-mathjax t)

     (use-package htmlize
       :ensure t)
   #+END_SRC
* Ido mode
  #+BEGIN_SRC emacs-lisp
  ;; (setq ido-enable-flex-matching t)
  ;; (setq ido-everywhere t)
  ;; (ido-mode 1)
  ;; #(defalias 'list-buffers 'ibuffer)
  #+END_SRC
* Counsel
  #+BEGIN_SRC emacs-lisp
    (use-package counsel
      :ensure t)
  #+END_SRC
* Swiper and Ivy
  #+BEGIN_SRC emacs-lisp
  (use-package swiper
  :ensure try
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> l") 'counsel-load-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)))
  #+END_SRC
* Auto-complete
  #+BEGIN_SRC emacs-lisp
  (use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)))
  #+END_SRC

* Avy movement
  #+BEGIN_SRC emacs-lisp
    (use-package avy
      :ensure
      :bind ("M-s" . avy-goto-char))
  #+END_SRC
* Theming
** Doom emacs
  #+BEGIN_SRC emacs-lisp
    (use-package doom-themes
      :ensure t
      :config (load-theme 'doom-acario-dark t))

    (use-package doom-modeline
      :ensure t
      :hook (after-init . doom-modeline-mode)
      :init
      (progn
	(setq doom-modeline-icon t)))
  #+END_SRC
** Icons
   #+BEGIN_SRC emacs-lisp
     (use-package all-the-icons
       :ensure t)
   #+END_SRC
* Yasnippet
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure t
      :init
      (yas-global-mode 1))
  #+END_SRC
* Python
** Elpy
   #+BEGIN_SRC emacs-lisp
     (use-package elpy
       :ensure t
       :config
       (elpy-enable))
     (setq elpy-rpc-python-command "python3")
   #+END_SRC
** Jedi
   #+BEGIN_SRC emacs-lisp
     (use-package jedi
       :ensure t
       :config
       (add-hook 'python-mode-hook 'jedi:setup)
       (add-hook 'python-mode-hook 'jedi:ac-setup))
   #+END_SRC
** Python 3
   #+BEGIN_SRC emacs-lisp
     (setq py-python-command "python3")
     (setq python-shell-interpreter "python3")
   #+END_SRC
** Virtualenv
   #+BEGIN_SRC emacs-lisp
     (use-package virtualenvwrapper
       :ensure t
       :config
       (venv-initialize-interactive-shells)
       (venv-initialize-eshell))
   #+END_SRC
* Flycheck
  #+BEGIN_SRC emacs-lisp
  (use-package flycheck
		 :ensure t
		 :init
		 (global-flycheck-mode t))
  #+END_SRC
