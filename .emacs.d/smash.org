Smashing config

* General settings

** Don't show startup message
   #+BEGIN_SRC emacs-lisp
   (setq inhibit-startup-message t)
   #+END_SRC

** Show line numbers in prog mode
   #+BEGIN_SRC emacs-lisp
   (add-hook 'prog-mode-hook 'display-line-numbers-mode)
   #+END_SRC

** Highlight line
   #+BEGIN_SRC emacs-lisp
   (global-hl-line-mode +1)
   #+END_SRC

** Hide menu bar
   #+BEGIN_SRC emacs-lisp
   (menu-bar-mode -1)
   #+END_SRC

** Hide toolbar
   #+BEGIN_SRC emacs-lisp
   (tool-bar-mode -1)
   #+END_SRC

** Hide scrollbar
   #+BEGIN_SRC emacs-lisp
   (scroll-bar-mode -1)
   #+END_SRC

** Delete selection
   #+BEGIN_SRC emacs-lisp
   (delete-selection-mode 1)
   #+END_SRC

** Show matching parentheses
   #+BEGIN_SRC emacs-lisp
   (show-paren-mode 1)
   #+END_SRC

** Nicer buffer list
   #+BEGIN_SRC emacs-lisp
   (defalias 'list-buffers 'ibuffer)
     ;; (defalias 'list-buffers 'ibuffer-other-window)
   #+END_SRC

** Yes or No or Y or N
   #+BEGIN_SRC emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

** Refresh to revert buffer
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "<F5>") 'revert-buffer)
   #+END_SRC
** Indent on new lines
   #+begin_src emacs-lisp
   (define-key global-map (kbd "RET") 'newline-and-indent)
   #+end_src
* UI
** Resize windows
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-M-<down>") 'enlarge-window)
     (global-set-key (kbd "C-M-<up>") 'shrink-window)
     (global-set-key (kbd "C-M-<right>") 'enlarge-window-horizontally)
     (global-set-key (kbd "C-M-<left>") 'shrink-window-horizontally)
   #+END_SRC
** Split window default
   #+BEGIN_SRC emacs-lisp
     (setq split-width-threshold 1)
   #+END_SRC
** Themes
   #+BEGIN_SRC emacs-lisp
   (use-package doom-themes
     :ensure t
     :config
     (load-theme 'doom-acario-dark t))
   #+END_SRC

** Modeline
   #+BEGIN_SRC emacs-lisp
   (use-package doom-modeline
     :ensure t
     :hook (after-init  . doom-modeline-mode))
   #+END_SRC

** Icons
   #+BEGIN_SRC emacs-lisp
   (use-package all-the-icons
     :ensure t)
   #+END_SRC
   
** Org mode

*** Org bullets
    #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
      :ensure t
      :config
        (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
    #+END_SRC

*** Org settings
    #+BEGIN_SRC emacs-lisp
      (setq org-support-shift-select t)
      (custom-set-variables
       '(org-directory "~/orgfiles")
       '(org-default-notes-file (concat org-directory "/notes.org"))
       '(org-export-html-postamble nil)
       '(org-startup-folded (quote oveview))
       '(org-startup-indented t))

      (setq org-file-apps
	    (append '(("\\.pdf\\'" . "zathura %s")) org-file-apps))

      (global-set-key "\C-ca" 'org-agenda)

      (use-package org-ac
	:ensure t
	:init
	(progn
	  (require 'org-ac)
	  (org-ac/config-default)))

      (global-set-key (kbd "C-c c") 'org-capture)

      (setq org-agenda-files (list "~/orgfiles/gcal.org"))
    #+END_SRC

* Modes 

** IDO
   #+BEGIN_SRC emacs-lisp
   (setq ido-everywhere t)
   (setq ido-enable-flex-matching t)
   (setq ido-use-filename-at-point 'guess)
   (setq ido-create-new-buffer 'always)
   (ido-mode t)
   #+END_SRC
   
* General packages
 
** Try package
   #+BEGIN_SRC emacs-lisp
   (use-package try
       :ensure t)
   #+END_SRC
   
** Which key
   #+BEGIN_SRC emacs-lisp
   (use-package which-key
     :ensure t
     :config (which-key-mode))
   #+END_SRC

** Projectile
   #+BEGIN_SRC emacs-lisp
   (use-package projectile
     :ensure t
     :config
     (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)
     (projectile-mode +1))
   #+END_SRC

** Dashboard
   #+BEGIN_SRC emacs-lisp
   (use-package dashboard
     :ensure t
     :init
     (progn
     (setq dashboard-items '((recents . 5)
     (projects . 5))))
     (setq dashboard-set-file-icons t)
     (setq dashboard-set-heading-icons t)
     :config
     (dashboard-setup-startup-hook)
     (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))))
   #+END_SRC

** Treemacs
   #+BEGIN_SRC emacs-lisp
   (use-package treemacs
     :ensure t
     :bind
     (:map global-map
     ([F8] . treemacs)
     ("C-<f8>" . treemacs-select-window))
     :config
     (setq treemacs-is-never-other-window t))
   #+END_SRC

** Treemacs Projectile

   #+BEGIN_SRC emacs-lisp
   (use-package treemacs-projectile
     :after treemacs projectile
     :ensure t)
   #+END_SRC

** Ace window
   #+BEGIN_SRC emacs-lisp
     (use-package ace-window
       :ensure t
       :init
       (progn
	 (global-set-key [remap other-window] 'ace-window)
	 (custom-set-faces
	  '(aw-leading-char-face
	    ((t (:inherit ace-jump-face-foreground :height 3.0)))))
       ))
   #+END_SRC

** Swiper search
   #+BEGIN_SRC emacs-lisp
     (use-package counsel
       :ensure t
       :bind
       (("M-y" . counsel-yank-pop)
	:map ivy-minibuffer-map
	("M-y" . ivy-next-line)))

     (use-package ivy
       :ensure t
       :diminish (ivy-mode)
       :bind (("C-x b" . ivy-switch-buffer))
       :config
       (ivy-mode 1)
       (setq ivy-use-virtual-buffers t)
       (setq ivy-display-style 'fancy))

     (use-package swiper
       :ensure t
       :bind (("C-s" .  swiper)
	      ("C-r" . swiper)
	      ("C-c C-r" . ivy-resume)
	      ("M-x" . counsel-M-x)
	      ("C-x C-f" . counsel-find-file))
       :config
       (progn
	 (ivy-mode 1)
	 (setq ivy-use-virtual-buffers t)
	 (setq ivy-display-style 'fancy)
	 (setq enable-recursive-minibuffers t)
	 ;; enable this if you want `swiper' to use it
	 ;; (setq search-default-mode #'char-fold-to-regexp)
	 ;; (global-set-key "\C-s" 'swiper)
	 ;; (global-set-key (kbd "C-c C-r") 'ivy-resume)
	 ;; (global-set-key (kbd "<f6>") 'ivy-resume)
	 ;; (global-set-key (kbd "M-x") 'counsel-M-x)
	 ;; (global-set-key (kbd "C-x C-f") 'counsel-find-file)
	 ;; (global-set-key (kbd "<f1> f") 'counsel-describe-function)
	 ;; (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
	 ;; (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
	 ;; (global-set-key (kbd "<f1> l") 'counsel-find-library)
	 ;; (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
	 ;; (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
	 ;; (global-set-key (kbd "C-c g") 'counsel-git)
	 ;; (global-set-key (kbd "C-c j") 'counsel-git-grep)
	 ;; (global-set-key (kbd "C-c k") 'counsel-ag)
	 ;; (global-set-key (kbd "C-x l") 'counsel-locate)
	 ;; (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
	 ;; (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
	 (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
     ))
   #+END_SRC

** Disable mouse
   #+BEGIN_SRC emacs-lisp
   (use-package  disable-mouse
     :ensure t
     :config
     (global-disable-mouse-mode))
   #+END_SRC
   
** Expand region
   #+BEGIN_SRC emacs-lisp
   (use-package expand-region
     :ensure t
     :bind
       ("C-=" . er/expand-region)
       ("C--" . er/contract-region))
   #+END_SRC

** Centaur tabs
   #+BEGIN_SRC emacs-lisp
   (use-package centaur-tabs
     :ensure t
     :config
     (setq centaur-tabs-set-bar 'over 
           centaur-tabs-set-icons t
	   centaur-tabs-gray-out-icons 'buffer
	   centaur-tabs-height 24
	   centaur-tabs-set-modified-marker t
	   centaur-tabs-modified-marker "*")
	(centaur-tabs-mode t)
	:bind
	("C-<next>" . centaur-tabs-forward)
	("C-<prior>" . centaur-tabs-backward))
   #+END_SRC

** Company autocomplete
   #+begin_comment
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :ensure t
       :init
       (add-hook 'after-init-hook 'global-company-mode))
   #+END_SRC
   #+end_comment
  
** Auto-complete autocomplete
   #+begin_src emacs-lisp
     (use-package auto-complete
       :ensure t
       :init
       (progn
	 (ac-config-default)
	 (global-auto-complete-mode t)))
   #+end_src
** Undo tree
  #+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode))
  #+END_SRC
** Flycheck
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t
       :init
       (global-flycheck-mode t))
   #+END_SRC
** Yasnippet
   #+begin_src emacs-lisp
   (use-package yasnippet
       :ensure t
       :init
       (yas-global-mode 1))
   #+end_src
** IEdit
   #+begin_src emacs-lisp
     (use-package iedit
     :ensure t)
   #+end_src

* Making
** Reveal.js presentations
   #+BEGIN_SRC emacs-lisp
     (use-package htmlize
       :ensure t)

     (use-package ox-reveal
       :ensure ox-reveal)

     (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
     (setq org-reveal-mathjax t)
   #+END_SRC
   
* Web Dev
** Web Mode
  #+begin_src emacs-lisp
    (use-package web-mode
      :ensure t
      :config
      (add-to-list  'auto-mode-alist '("\\.html\\'" . web-mode))
      (setq web-mode-engines-alist
	    '(("django" . "\\.html\\")))
      (setq web-mode-ac-sources-alist
	    '(("css" . (ac-sources-css-property))
	      ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
      (setq web-mode-enable-auto-closing t))
  #+end_src

* Javascript
** RJSX Mode
   #+BEGIN_SRC emacs-lisp
     (use-package rjsx-mode
       :ensure t
       :mode "\\.js\\'")
   #+END_SRC

** Tide
   #+BEGIN_SRC emacs-lisp
     (defun setup-tilde-mode()
       "Setup function for tide."
       (interactive)
       (tide-setup)
       (flycheck-mode +1)
       (setq flycheck-check-syntax-automatically '(save mode-enabled))
       (tide-hl-identifier-mode +1)
       (auto-complete-mode +1))

     (use-package tide
       :ensure t
       :after (rjsx-mode auto-complete flycheck)
       :hook (rjsx-mode . setup-tide-mode))
   #+END_SRC
   
** Prettier
   #+BEGIN_SRC emacs-lisp
   (use-package prettier-js
     :ensure t
     :after (rjsx-mode)
     :hook (rjsx-mode . prettier-js-mode))
   #+END_SRC

* Python
** Python 3
  #+BEGIN_SRC emacs-lisp
    (setq python-shell-interpreter "python3")
  #+END_SRC
** Jedi (Company)
   #+begin_comment
   #+begin_src emacs-lisp
     (use-package company-jedi
       :ensure t
       :config
       (add-to-list 'company-backends 'company-jedi))
   #+end_src
   #+end_comment
** Jedi
   #+begin_src emacs-lisp
	  (use-package jedi
	    :ensure t
	    :config
	    (add-hook 'python-mode-hook 'jedi:setup)
	    (add-hook 'python-mode-hook 'jedi:ac-setup))
   #+end_src
   
