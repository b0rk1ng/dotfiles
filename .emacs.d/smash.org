Smashing config

* General settings

** Don't show startup message
   #+BEGIN_SRC emacs-lisp
   (setq inhibit-startup-message t)
   #+END_SRC

** Show line numbers in prog mode
   #+BEGIN_SRC emacs-lisp
   (add-hook 'prog-mode-hook 'display-line-numbers-mode)
   #+END_SRC

** Highlight line
   #+BEGIN_SRC emacs-lisp
   (global-hl-line-mode +1)
   #+END_SRC

** Hide menu bar
   #+BEGIN_SRC emacs-lisp
   (menu-bar-mode -1)
   #+END_SRC

** Hide toolbar
   #+BEGIN_SRC emacs-lisp
   (tool-bar-mode -1)
   #+END_SRC

** Hide scrollbar
   #+BEGIN_SRC emacs-lisp
   (scroll-bar-mode -1)
   #+END_SRC

** Delete selection
   #+BEGIN_SRC emacs-lisp
   (delete-selection-mode 1)
   #+END_SRC

** Show matching parentheses
   #+BEGIN_SRC emacs-lisp
   (show-paren-mode 1)
   #+END_SRC

** Nicer buffer list
   #+BEGIN_SRC emacs-lisp
   (defalias 'list-buffers 'ibuffer)
     ;; (defalias 'list-buffers 'ibuffer-other-window)
   #+END_SRC

* UI

** Themes
   #+BEGIN_SRC emacs-lisp
   (use-package doom-themes
     :ensure t
     :config
     (load-theme 'doom-acario-dark t))
   #+END_SRC

** Modeline
   #+BEGIN_SRC emacs-lisp
   (use-package doom-modeline
     :ensure t
     :hook (after-init  . doom-modeline-mode))
   #+END_SRC

** Icons
   #+BEGIN_SRC emacs-lisp
   (use-package all-the-icons
     :ensure t)
   #+END_SRC
   
** Org mode

*** Org bullets
    #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
      :ensure t
      :config
        (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
    #+END_SRC

*** Org settings
    #+BEGIN_SRC emacs-lisp
    (setq org-support-shift-select t)
    #+END_SRC

* Modes 

** IDO
   #+BEGIN_SRC emacs-lisp
   (setq ido-everywhere t)
   (setq ido-enable-flex-matching t)
   (ido-mode t)
   #+END_SRC

* General packages
 
** Try package
   #+BEGIN_SRC emacs-lisp
   (use-package try
       :ensure t)
   #+END_SRC
   
** Which key
   #+BEGIN_SRC emacs-lisp
   (use-package which-key
     :ensure t
     :config (which-key-mode))
   #+END_SRC

** Projectile
   #+BEGIN_SRC emacs-lisp
   (use-package projectile
     :ensure t
     :config
     (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)
     (projectile-mode +1))
   #+END_SRC

** Dashboard
   #+BEGIN_SRC emacs-lisp
   (use-package dashboard
     :ensure t
     :init
     (progn
     (setq dashboard-items '((recents . 5)
     (projects . 5))))
     (setq dashboard-set-file-icons t)
     (setq dashboard-set-heading-icons t)
     :config
     (dashboard-setup-startup-hook))
   #+END_SRC

** Treemacs
   #+BEGIN_SRC emacs-lisp
   (use-package treemacs
     :ensure t
     :bind
     (:map global-map
     ([F8] . treemacs)
     ("C-<f8>" . treemacs-select-window))
     :config
     (setq treemacs-is-never-other-window t))
   #+END_SRC

** Treemacs Projectile

   #+BEGIN_SRC emacs-lisp
   (use-package treemacs-projectile
     :after treemacs projectile
     :ensure t)
   #+END_SRC

** Ace window
   #+BEGIN_SRC emacs-lisp
     (use-package ace-window
       :ensure t
       :init
       (progn
	 (global-set-key [remap other-window] 'ace-window)
	 (custom-set-faces
	  '(aw-leading-char-face
	    ((t (:inherit ace-jump-face-foreground :height 3.0)))))
       ))
   #+END_SRC
** Disable mouse
   #+BEGIN_SRC emacs-lisp
   (use-package  disable-mouse
     :ensure t
     :config
     (global-disable-mouse-mode))
   #+END_SRC
   
** Expand region
   #+BEGIN_SRC emacs-lisp
   (use-package expand-region
     :ensure t
     :bind
       ("C-=" . er/expand-region)
       ("C--" . er/contract-region))
   #+END_SRC

** Centaur tabs
   #+BEGIN_SRC emacs-lisp
   (use-package centaur-tabs
     :ensure t
     :config
     (setq centaur-tabs-set-bar 'over 
           centaur-tabs-set-icons t
	   centaur-tabs-gray-out-icons 'buffer
	   centaur-tabs-height 24
	   centaur-tabs-set-modified-marker t
	   centaur-tabs-modified-marker "*")
	(centaur-tabs-mode t)
	:bind
	("C-<next>" . centaur-tabs-forward)
	("C-<prior>" . centaur-tabs-backward))
   #+END_SRC

** Company
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :ensure t
       :init
       (add-hook 'after-init-hook 'global-company-mode))
   #+END_SRC
  
** Flycheck
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t
       :init
       (global-flycheck-mode))
   #+END_SRC

* Javascript

** RJSX Mode
   #+BEGIN_SRC emacs-lisp
     (use-package rjsx-mode
       :ensure t
       :mode "\\.js\\'")
   #+END_SRC

** Tide
   #+BEGIN_SRC emacs-lisp
     (defun setup-tilde-mode()
       "Setup function for tide."
       (interactive)
       (tide-setup)
       (flycheck-mode +1)
       (setq flycheck-check-syntax-automatically '(save mode-enabled))
       (tide-hl-identifier-mode +1)
       (company-mode +1))

     (use-package tide
       :ensure t
       :after (rjsx-mode company flycheck)
       :hook (rjsx-mode . setup-tide-mode))
   #+END_SRC
   
** Prettier
   #+BEGIN_SRC emacs-lisp
   (use-package prettier-js
     :ensure t
     :after (rjsx-mode)
     :hook (rjsx-mode . prettier-js-mode))
   #+END_SRC
